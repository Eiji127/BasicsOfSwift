// MARK: - モジュールとは
/*
 ・モジュール：複数のソースコードを含む配布可能なプログラムの単位で、他のプログラムへのインポートが可能。
 ・Swiftでのモジュールはプログラムの名前空間を区切る単位にもなっている
 */
// MARK: - 再利用可能かつ配布可能なプログラム
/*
 ・独立性の高いプログラムは、ほかのプロジェクトでも再利用できる可能性が高い
 ・名前空間を定義することでモジュール間の名前の衝突をを解消する
 ・公開するインターフェースを絞ることでモジュール外からの想定外の利用を防いだりする
 */
// MARK: - 名前空間
/*
 ・名前空間：型名や変数名、定数名、関数名などの名前が一意となる範囲
 → 名前の衝突を避けつつも名前を適切な短さに保つことに役立つ
 ・1つのモジュールを定義すると1つの名前空間が定義される
 */

//・名前の衝突の回避
/*
 ↓ FrameworkAとFrameworkBというモジュールが存在するとしたとき...
 */
import FrameworkA
import FrameworkB

let a = FrameworkA.globalIntConstant // FrameworkAで定義されたglobalIntConstantが代入される
let b = FrameworkB.globalIntConstant // FrameworkBで定義されたglobalIntConstantが代入される

let c = globalIntConstant // globalIntConstantが指すものが曖昧なのでコンパイルエラー

// MARK: - アクセスコントロール
/*
 アクセスコントロール：モジュール内に型や型の要素に対する外部からのアクセスを制限するしくみ
 */

// 1. アクセスレベル
/*
 [指定方法]
 ・open：モジュール内外のすべてのアクセスが許可する
 ・public：モジュール内外のすべてのアクセスを許可するが、モジュール外ではクラスを継承したりオーバーライドしたりすることはできない
 ・internal：同一のモジュール内にアクセスのみを許可する
 ・fileprivate：同一ソースファイル内のアクセスのみを許可する
 ・private：対象の要素が属しているスコープ内のアクセスのみ許可する
 */

// 2. モジュールヘッダ - モジュール外からの参照可能なインターフェース
/*
 ・C言語のようにヘッダファイルを記述する必要はない
 ・ctl + ⌘　でモジュールヘッダを確認することが可能
 ・モジュールヘッダでは実装が表示されない
 ・ドキュメントコメント(///や/** ~~~ */)：インターフェースに対するコメントとして扱い、モジュール利用者が閲覧できるようにしている、モジュールヘッダにも表示される
 */
import Foundation

// MARK: -
// MARK: -
// MARK: -
// MARK: -
// MARK: -
// MARK: -
// MARK: -
// MARK: -
